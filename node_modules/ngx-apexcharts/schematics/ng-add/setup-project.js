"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
const components_1 = require("@schematics/angular/private/components");
const utils_1 = require("../utils");
function default_1(options) {
    return (host, context) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        const project = (0, utils_1.getProjectFromWorkspace)(workspace, options.project);
        if (project.extensions["projectType"] !== workspace_models_1.ProjectType.Application) {
            context.logger.warn(`project '${options.project}' is not an angular application. it look like angular library`);
            return;
        }
        return (0, schematics_1.chain)([addNgxApexchartsModule(options)]);
    });
}
exports.default = default_1;
function addNgxApexchartsModule(options) {
    return (host, context) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        const project = (0, utils_1.getProjectFromWorkspace)(workspace, options.project);
        const mainFilePath = (0, utils_1.getProjectMainFile)(project);
        if ((0, ng_ast_utils_1.isStandaloneApp)(host, mainFilePath)) {
            addNgxApexchartsToStandaloneApp(host, mainFilePath, context, options);
        }
        else {
            addNgxApexchartsToNonStandaloneApp(host, project, mainFilePath, context);
        }
    });
}
function addNgxApexchartsToStandaloneApp(host, mainFile, _context, _options) {
    const ngxApexchartModuleoduleName = "NgxApexchartsModule";
    const libraryName = "ngx-apexcharts";
    // TODO: addModuleImportToStandaloneBootstrap is removed from @schematics/angular but addRootImport does not work
    // addRootImport(options.project!, ({code, external}) => code`${external(ngxApexchartModuleoduleName, libraryName)}`);
    (0, components_1.addModuleImportToStandaloneBootstrap)(host, mainFile, ngxApexchartModuleoduleName, libraryName);
}
function addNgxApexchartsToNonStandaloneApp(host, project, mainFile, context) {
    const ngxApexchartModuleoduleName = "NgxApexchartsModule";
    const appModulePath = (0, ng_ast_utils_1.getAppModulePath)(host, mainFile);
    if ((0, utils_1.hasNgModuleImport)(host, appModulePath, ngxApexchartModuleoduleName)) {
        context.logger.error(`Could not set up "${ngxApexchartModuleoduleName}" ` +
            `because "${ngxApexchartModuleoduleName}" is already imported.`);
        context.logger.info(`Please manually set up browser animations.`);
    }
    else {
        (0, utils_1.addModuleImportToRootModule)(host, ngxApexchartModuleoduleName, "ngx-apexcharts", project);
    }
}
//# sourceMappingURL=setup-project.js.map